//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.dns.android.authoritative.fragments;

import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import com.dns.android.authoritative.R.layout;
import com.dns.android.authoritative.domain.Domain;
import com.dns.android.authoritative.rest.RestClient_;
import com.dns.android.authoritative.utils.DNSPrefs_;
import com.googlecode.androidannotations.api.BackgroundExecutor;

public final class DomainsFragment_
    extends DomainsFragment
{

    private View contentView_;
    private Handler handler_ = new Handler();

    private void init_(Bundle savedInstanceState) {
        prefs = new DNSPrefs_(getActivity());
        client = RestClient_.getInstance_(getActivity());
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
    }

    private void afterSetContentView_() {
        domainsLoadingIndicator = ((ProgressBar) findViewById(com.dns.android.authoritative.R.id.domainListBusyIndicator));
        domainListView = ((ListView) findViewById(com.dns.android.authoritative.R.id.domainListView));
        domFilterApply = ((ImageView) findViewById(com.dns.android.authoritative.R.id.domFilterApply));
        domainFilter = ((EditText) findViewById(com.dns.android.authoritative.R.id.domainFilter));
        {
            View view = findViewById(com.dns.android.authoritative.R.id.domFilterApply);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DomainsFragment_.this.onSearchApply();
                    }

                }
                );
            }
        }
        {
            AdapterView<?> view = ((AdapterView<?> ) findViewById(com.dns.android.authoritative.R.id.domainListView));
            if (view!= null) {
                view.setOnItemClickListener(new OnItemClickListener() {


                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        handleDomainClick(((Domain) parent.getAdapter().getItem(position)));
                    }

                }
                );
            }
        }
        {
            AdapterView<?> view = ((AdapterView<?> ) findViewById(com.dns.android.authoritative.R.id.domainListView));
            if (view!= null) {
                view.setOnItemLongClickListener(new OnItemLongClickListener() {


                    @Override
                    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                        handleDomainLongClick(((Domain) parent.getAdapter().getItem(position)));
                        return true;
                    }

                }
                );
            }
        }
        ((RestClient_) client).afterSetContentView_();
        getTheBallRolling();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.domains_fragment, container, false);
        }
        afterSetContentView_();
        return contentView_;
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    public static DomainsFragment_.FragmentBuilder_ builder() {
        return new DomainsFragment_.FragmentBuilder_();
    }

    @Override
    public void domainDeleteSuceeded(final Domain domain) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.domainDeleteSuceeded(domain);
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void setListViewAdapter() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.setListViewAdapter();
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void uiSetup() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.uiSetup();
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateListAdapter() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.updateListAdapter();
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void domainDeleteFailed(final Domain domain) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.domainDeleteFailed(domain);
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void loadInitialDomains() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.loadInitialDomains();
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void loadFilteredDomains() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.loadFilteredDomains();
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void deleteDomain(final Domain domain) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DomainsFragment_.super.deleteDomain(domain);
                } catch (RuntimeException e) {
                    Log.e("DomainsFragment_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public DomainsFragment build() {
            DomainsFragment_ fragment_ = new DomainsFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
